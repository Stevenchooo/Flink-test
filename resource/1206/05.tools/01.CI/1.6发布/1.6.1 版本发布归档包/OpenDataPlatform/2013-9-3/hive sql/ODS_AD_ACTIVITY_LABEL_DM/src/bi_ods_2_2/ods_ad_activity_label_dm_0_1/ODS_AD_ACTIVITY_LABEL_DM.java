// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.2.r90681)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package bi_ods_2_2.ods_ad_activity_label_dm_0_1;

import routines.Util;
import routines.JsonDecode;
import routines.DataOperation;
import routines.CommonUtil;
import routines.GetRandomPhoneNum;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ReturnUtil;
import routines.BI3JSONUtil;
import routines.ADUtils;
import routines.DecodeBase64;
import routines.Mathematical;
import routines.RecordSeparate;
import routines.Relational;
import routines.DemoRoutines;
import routines.TalendDate;
import routines.Crypt;
import routines.SUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;
import routines.RecordSeparate;
import java.io.File;

//the import part of tJava_3
//import java.util.List;
import java.util.*;
import java.io.*;
import routines.RecordSeparate;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: ODS_AD_ACTIVITY_LABEL_DM Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.2.r90681
 * @status 
 */
public class ODS_AD_ACTIVITY_LABEL_DM implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (tablename != null) {

				this.setProperty("tablename", tablename.toString());

			}

			if (tablelocation != null) {

				this.setProperty("tablelocation", tablelocation.toString());

			}

			if (rejectdir != null) {

				this.setProperty("rejectdir", rejectdir.toString());

			}

			if (pushtime != null) {

				this.setProperty("pushtime", pushtime.toString());

			}

			if (hadoopdir != null) {

				this.setProperty("hadoopdir", hadoopdir.toString());

			}

			if (filename != null) {

				this.setProperty("filename", filename.toString());

			}

			if (backupdir != null) {

				this.setProperty("backupdir", backupdir.toString());

			}

		}

		public String tablename;

		public String getTablename() {
			return this.tablename;
		}

		public String tablelocation;

		public String getTablelocation() {
			return this.tablelocation;
		}

		public String rejectdir;

		public String getRejectdir() {
			return this.rejectdir;
		}

		public String pushtime;

		public String getPushtime() {
			return this.pushtime;
		}

		public String hadoopdir;

		public String getHadoopdir() {
			return this.hadoopdir;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public String backupdir;

		public String getBackupdir() {
			return this.backupdir;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ODS_AD_ACTIVITY_LABEL_DM";
	private final String projectName = "BI_ODS_2_2";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ODS_AD_ACTIVITY_LABEL_DM.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ODS_AD_ACTIVITY_LABEL_DM.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tContextLoad_1", System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tSystem_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSystem_1", System.currentTimeMillis());

		status = "failure";

		tSystem_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tSystem_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSystem_2", System.currentTimeMillis());

		status = "failure";

		tSystem_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tSystem_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSystem_4", System.currentTimeMillis());

		status = "failure";

		tSystem_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileCopy_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileCopy_1", System.currentTimeMillis());

		status = "failure";

		tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tSystem_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSystem_3", System.currentTimeMillis());

		status = "failure";

		tSystem_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tSystem_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tSystem_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tSystem_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tSystem_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];
		static byte[] commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length) {
					if (length < 1024
							&& commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length == 0) {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[1024];
					} else {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length);
				strReturn = new String(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());
				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;
				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1", System
						.currentTimeMillis());
				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;
				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"../conf/conf.properties");
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				properties_tFileInputProperties_1
						.load(new java.io.FileInputStream(
								file_tFileInputProperties_1));
				java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
						.propertyNames();
				while (enumeration_tFileInputProperties_1.hasMoreElements()) {
					row4.key = (String) enumeration_tFileInputProperties_1
							.nextElement();
					row4.value = (String) properties_tFileInputProperties_1
							.getProperty(row4.key);

					/**
					 * [tFileInputProperties_1 begin ] stop
					 */
					/**
					 * [tFileInputProperties_1 main ] start
					 */

					currentComponent = "tFileInputProperties_1";

					tos_count_tFileInputProperties_1++;

					/**
					 * [tFileInputProperties_1 main ] stop
					 */

					/**
					 * [tContextLoad_1 main ] start
					 */

					currentComponent = "tContextLoad_1";

					// ////////////////////////
					String tmp_key_tContextLoad_1 = null;

					String key_tContextLoad_1 = null;
					if (row4.key != null) {
						tmp_key_tContextLoad_1 = row4.key.trim();
						if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
								.startsWith("!"))) {
							tmp_key_tContextLoad_1 = null;
						} else {
							row4.key = tmp_key_tContextLoad_1;
						}
					}
					if (row4.key != null) {

						key_tContextLoad_1 =

						row4.key;

					}

					String value_tContextLoad_1 = null;
					if (row4.value != null) {

						value_tContextLoad_1 =

						row4.value;

					}

					if (tmp_key_tContextLoad_1 != null) {
						try {
							if (key_tContextLoad_1 != null
									&& "tablename".equals(key_tContextLoad_1)) {
								context.tablename = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "tablelocation"
											.equals(key_tContextLoad_1)) {
								context.tablelocation = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "rejectdir".equals(key_tContextLoad_1)) {
								context.rejectdir = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "pushtime".equals(key_tContextLoad_1)) {
								context.pushtime = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "hadoopdir".equals(key_tContextLoad_1)) {
								context.hadoopdir = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "filename".equals(key_tContextLoad_1)) {
								context.filename = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "backupdir".equals(key_tContextLoad_1)) {
								context.backupdir = value_tContextLoad_1;
							}

							if (context.getProperty(key_tContextLoad_1) != null) {
								assignList_tContextLoad_1
										.add(key_tContextLoad_1);
							} else {
								newPropertyList_tContextLoad_1
										.add(key_tContextLoad_1);
							}
							context.setProperty(key_tContextLoad_1,
									value_tContextLoad_1);
						} catch (Exception e) {
							System.err.println("Set value for key: "
									+ key_tContextLoad_1
									+ " failed, error message: "
									+ e.getMessage());
						}
						nb_line_tContextLoad_1++;
					}
					// ////////////////////////

					tos_count_tContextLoad_1++;

					/**
					 * [tContextLoad_1 main ] stop
					 */

					/**
					 * [tFileInputProperties_1 end ] start
					 */

					currentComponent = "tFileInputProperties_1";

					tos_count_tFileInputProperties_1++;
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						tos_count_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1", System
						.currentTimeMillis());

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId()
						+ "", "", "", "", "", resumeUtil
						.convertToJsonText(context));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputProperties_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Begin process file " + context.filename
						+ " to table ODS_AD_ACTIVITY_LABEL_DM.");
				System.out.println("input source:::" + context.filename);
				System.out.println("output source:::ODS_AD_ACTIVITY_LABEL_DM");
				String file = context.filename;
				String newFile = file + ".ods";
				String fileName = file.substring(file.lastIndexOf('/') + 1);
				String rejectFile = context.rejectdir + "/" + fileName + "rjt";
				globalMap.put("newFile", newFile);
				globalMap.put("rejectFile", rejectFile);

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				File userFile = new File(context.filename);
				if (!userFile.exists()) {
					throw new Exception("File not exist " + context.filename);
				}
				String file = context.filename;
				System.out.println("file:::" + file);

				// PIWIK_表名_日期_序号.txt piwik_site_20110101010101_0.txt
				String fileName = file.substring(file.lastIndexOf('/') + 1);
				System.out.println("fileName:::" + fileName);
				int index = fileName.lastIndexOf('.');
				System.out.println("index:::" + index);
				String backDate = fileName.substring(index - 10, index - 2);
				System.out.println("backDate:::" + backDate);
				globalMap.put("backDate", backDate);

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];
		static byte[] commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];

		public String activity_id;

		public String getActivity_id() {
			return this.activity_id;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		public String labels;

		public String getLabels() {
			return this.labels;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length) {
					if (length < 1024
							&& commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length == 0) {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[1024];
					} else {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length);
				strReturn = new String(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM) {

				try {

					int length = 0;

					this.activity_id = readString(dis);

					this.event = readString(dis);

					this.labels = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.activity_id, dos);

				// String

				writeString(this.event, dos);

				// String

				writeString(this.labels, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("activity_id=" + activity_id);
			sb.append(",event=" + event);
			sb.append(",labels=" + labels);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];
		static byte[] commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];

		public String activity_id;

		public String getActivity_id() {
			return this.activity_id;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		public String labels;

		public String getLabels() {
			return this.labels;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length) {
					if (length < 1024
							&& commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length == 0) {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[1024];
					} else {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length);
				strReturn = new String(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM) {

				try {

					int length = 0;

					this.activity_id = readString(dis);

					this.event = readString(dis);

					this.labels = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.activity_id, dos);

				// String

				writeString(this.event, dos);

				// String

				writeString(this.labels, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("activity_id=" + activity_id);
			sb.append(",event=" + event);
			sb.append(",labels=" + labels);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];
		static byte[] commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[0];

		public String activity_id;

		public String getActivity_id() {
			return this.activity_id;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		public String labels;

		public String getLabels() {
			return this.labels;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length) {
					if (length < 1024
							&& commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM.length == 0) {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[1024];
					} else {
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length);
				strReturn = new String(
						commonByteArray_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI_ODS_2_2_ODS_AD_ACTIVITY_LABEL_DM) {

				try {

					int length = 0;

					this.activity_id = readString(dis);

					this.event = readString(dis);

					this.labels = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.activity_id, dos);

				// String

				writeString(this.event, dos);

				// String

				writeString(this.labels, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("activity_id=" + activity_id);
			sb.append(",event=" + event);
			sb.append(",labels=" + labels);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						(String) globalMap.get("newFile"))).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\001"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;
				try {
					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											false), "UTF-8"));

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1", System
							.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_1";

					int tos_count_tFileOutputDelimited_1 = 0;

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							(String) globalMap.get("rejectFile")))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

					int nb_line_tFileOutputDelimited_1 = 0;
					int splitEvery_tFileOutputDelimited_1 = 1000;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					final String OUT_DELIM_tFileOutputDelimited_1 = /**
					 * Start
					 * field tFileOutputDelimited_1:FIELDSEPARATOR
					 */
					"\001"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
					 * 
					 * Start field tFileOutputDelimited_1:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {
							dir_tFileOutputDelimited_1.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_1 = null;
					try {
						outtFileOutputDelimited_1 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												false), "UTF-8"));

						if (filetFileOutputDelimited_1.length() == 0) {

							outtFileOutputDelimited_1.write("activity_id");

							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write("event");

							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write("labels");

							outtFileOutputDelimited_1
									.write(OUT_DELIM_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write("errorMessage");

							outtFileOutputDelimited_1
									.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
							outtFileOutputDelimited_1.flush();
						}

						/**
						 * [tFileOutputDelimited_1 begin ] stop
						 */

						/**
						 * [tFilterRow_1 begin ] start
						 */

						ok_Hash.put("tFilterRow_1", false);
						start_Hash.put("tFilterRow_1", System
								.currentTimeMillis());
						currentComponent = "tFilterRow_1";

						int tos_count_tFilterRow_1 = 0;
						int nb_line_tFilterRow_1 = 0;
						int nb_line_ok_tFilterRow_1 = 0;
						int nb_line_reject_tFilterRow_1 = 0;

						class Operator_tFilterRow_1 {
							private String sErrorMsg = "";
							private boolean bMatchFlag = true;
							private String sUnionFlag = "&&";

							public Operator_tFilterRow_1(String unionFlag) {
								sUnionFlag = unionFlag;
								bMatchFlag = "||".equals(unionFlag) ? false
										: true;
							}

							public String getErrorMsg() {
								if (sErrorMsg != null && sErrorMsg.length() > 1)
									return sErrorMsg.substring(1);
								else
									return null;
							}

							public boolean getMatchFlag() {
								return bMatchFlag;
							}

							public void matches(boolean partMatched,
									String reason) {
								// no need to care about the next judgement
								if ("||".equals(sUnionFlag) && bMatchFlag) {
									return;
								}

								if (!partMatched) {
									sErrorMsg += "|" + reason;
								}

								if ("||".equals(sUnionFlag))
									bMatchFlag = bMatchFlag || partMatched;
								else
									bMatchFlag = bMatchFlag && partMatched;
							}
						}

						/**
						 * [tFilterRow_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_1", false);
						start_Hash.put("tFileInputDelimited_1", System
								.currentTimeMillis());
						currentComponent = "tFileInputDelimited_1";

						int tos_count_tFileInputDelimited_1 = 0;

						class RowHelper_tFileInputDelimited_1 {

							public void valueToConn(
									org.talend.fileprocess.FileInputDelimited fid,
									row1Struct row1) throws Exception {

								row1.activity_id = fid.get(0);

								row1.event = fid.get(1);

								row1.labels = fid.get(2);

							}

						}
						RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

						int nb_line_tFileInputDelimited_1 = 0;
						org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
						try {

							Object filename_tFileInputDelimited_1 = context.filename;
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
								if (footer_value_tFileInputDelimited_1 > 0
										|| random_value_tFileInputDelimited_1 > 0) {
									throw new Exception(
											"When the input source is a stream,footer and random shouldn't be bigger than 0.");
								}

							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
										context.filename, "UTF-8", "\001",
										"\n", true, 0, 0, -1, -1, false);
							} catch (Exception e) {

								System.err.println(e.getMessage());

							}

							while (fid_tFileInputDelimited_1 != null
									&& fid_tFileInputDelimited_1.nextRecord()) {

								row1 = null;

								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {

									rowHelper_tFileInputDelimited_1
											.valueToConn(
													fid_tFileInputDelimited_1,
													row1);

								} catch (Exception e) {
									whetherReject_tFileInputDelimited_1 = true;

									System.err.println(e.getMessage());
									row1 = null;

								}

								/**
								 * [tFileInputDelimited_1 begin ] stop
								 */
								/**
								 * [tFileInputDelimited_1 main ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								tos_count_tFileInputDelimited_1++;

								/**
								 * [tFileInputDelimited_1 main ] stop
								 */
								// Start of branch "row1"
								if (row1 != null) {
									row3 = null;

									/**
									 * [tFilterRow_1 main ] start
									 */

									currentComponent = "tFilterRow_1";

									row3 = null;
									row2 = null;
									Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
											"&&");

									if (ope_tFilterRow_1.getMatchFlag()) {
										if (row2 == null) {
											row2 = new row2Struct();
										}
										row2.activity_id = row1.activity_id;
										row2.event = row1.event;
										row2.labels = row1.labels;
										nb_line_ok_tFilterRow_1++;
									} else {
										if (row3 == null) {
											row3 = new row3Struct();
										}
										row3.activity_id = row1.activity_id;
										row3.event = row1.event;
										row3.labels = row1.labels;
										row3.errorMessage = ope_tFilterRow_1
												.getErrorMsg();
										nb_line_reject_tFilterRow_1++;
									}

									nb_line_tFilterRow_1++;

									tos_count_tFilterRow_1++;

									/**
									 * [tFilterRow_1 main ] stop
									 */
									// Start of branch "row2"
									if (row2 != null) {

										/**
										 * [tFileOutputDelimited_2 main ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

										if (row2.activity_id != null) {

											sb_tFileOutputDelimited_2.append(

											row2.activity_id

											);

										}

										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);

										if (row2.event != null) {

											sb_tFileOutputDelimited_2.append(

											row2.event

											);

										}

										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_tFileOutputDelimited_2);

										if (row2.labels != null) {

											sb_tFileOutputDelimited_2.append(

											row2.labels

											);

										}

										sb_tFileOutputDelimited_2
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

										nb_line_tFileOutputDelimited_2++;

										outtFileOutputDelimited_2
												.write(sb_tFileOutputDelimited_2
														.toString());

										tos_count_tFileOutputDelimited_2++;

										/**
										 * [tFileOutputDelimited_2 main ] stop
										 */

									} // End of branch "row2"

									// Start of branch "row3"
									if (row3 != null) {

										/**
										 * [tFileOutputDelimited_1 main ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

										if (row3.activity_id != null) {

											sb_tFileOutputDelimited_1.append(

											row3.activity_id

											);

										}

										sb_tFileOutputDelimited_1
												.append(OUT_DELIM_tFileOutputDelimited_1);

										if (row3.event != null) {

											sb_tFileOutputDelimited_1.append(

											row3.event

											);

										}

										sb_tFileOutputDelimited_1
												.append(OUT_DELIM_tFileOutputDelimited_1);

										if (row3.labels != null) {

											sb_tFileOutputDelimited_1.append(

											row3.labels

											);

										}

										sb_tFileOutputDelimited_1
												.append(OUT_DELIM_tFileOutputDelimited_1);

										if (row3.errorMessage != null) {

											sb_tFileOutputDelimited_1.append(

											row3.errorMessage

											);

										}

										sb_tFileOutputDelimited_1
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

										nb_line_tFileOutputDelimited_1++;

										outtFileOutputDelimited_1
												.write(sb_tFileOutputDelimited_1
														.toString());

										tos_count_tFileOutputDelimited_1++;

										/**
										 * [tFileOutputDelimited_1 main ] stop
										 */

									} // End of branch "row3"

								} // End of branch "row1"

								/**
								 * [tFileInputDelimited_1 end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

							}
						} finally {
							if (!((Object) (context.filename) instanceof java.io.InputStream)) {
								if (fid_tFileInputDelimited_1 != null) {
									fid_tFileInputDelimited_1.close();
								}
							}
							if (fid_tFileInputDelimited_1 != null) {
								globalMap.put("tFileInputDelimited_1_NB_LINE",
										fid_tFileInputDelimited_1
												.getRowNumber());
							}
						}

						ok_Hash.put("tFileInputDelimited_1", true);
						end_Hash.put("tFileInputDelimited_1", System
								.currentTimeMillis());

						/**
						 * [tFileInputDelimited_1 end ] stop
						 */

						/**
						 * [tFilterRow_1 end ] start
						 */

						currentComponent = "tFilterRow_1";

						globalMap.put("tFilterRow_1_NB_LINE",
								nb_line_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_OK",
								nb_line_ok_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_REJECT",
								nb_line_reject_tFilterRow_1);

						ok_Hash.put("tFilterRow_1", true);
						end_Hash.put("tFilterRow_1", System.currentTimeMillis());

						/**
						 * [tFilterRow_1 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

					} finally {
						if (outtFileOutputDelimited_1 != null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
						globalMap.put("tFileOutputDelimited_1_NB_LINE",
								nb_line_tFileOutputDelimited_1);
						globalMap.put("tFileOutputDelimited_1_FILE_NAME",
								fileName_tFileOutputDelimited_1);
						if (isFileGenerated_tFileOutputDelimited_1
								&& nb_line_tFileOutputDelimited_1 == 0) {

							filetFileOutputDelimited_1.delete();

						}
					} // finally

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1", System
							.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System
						.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				String file = (String) globalMap.get("newFile");
				// appBatchCheck_192.168.254.150.log.20120723.txt.ods
				String fileName = file.substring(file.lastIndexOf('/') + 1);
				int index = fileName.lastIndexOf('.');
				String fileNameTemp = fileName.substring(0, index);
				index = fileNameTemp.lastIndexOf('.');
				String pt_d = fileNameTemp.substring(index - 10, index - 2);
				String partitionFile = context.hadoopdir
						+ context.tablelocation + "/pt_d=" + pt_d + "/"
						+ fileName;
				System.out.println("File path in hadoop is " + partitionFile);
				globalMap.put("partitionFile", partitionFile);
				globalMap.put("pt_d", pt_d);

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId()
								+ "", "", "", "", "", "");
			}

			tSystem_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tSystem_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSystem_1 begin ] start
				 */

				ok_Hash.put("tSystem_1", false);
				start_Hash.put("tSystem_1", System.currentTimeMillis());
				currentComponent = "tSystem_1";

				int tos_count_tSystem_1 = 0;

				Runtime runtime_tSystem_1 = Runtime.getRuntime();

				String[] env_tSystem_1 = null;
				java.util.Map<String, String> envMap_tSystem_1 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_1 = new java.util.HashMap();
				envMapClone_tSystem_1.putAll(envMap_tSystem_1);

				final Process ps_tSystem_1 = runtime_tSystem_1.exec(
						new String[] {
								"/bin/sh",
								"-c",
								"hadoop fs -test -e "
										+ (String) globalMap
												.get("partitionFile") },
						env_tSystem_1);

				globalMap.remove("tSystem_1_OUTPUT");
				globalMap.remove("tSystem_1_ERROROUTPUT");

				Thread normal_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_1
											.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_1.start();

				Thread error_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_1
											.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_1.start();
				if (ps_tSystem_1.getOutputStream() != null) {
					ps_tSystem_1.getOutputStream().close();
				}
				ps_tSystem_1.waitFor();
				normal_tSystem_1.join(10000);
				error_tSystem_1.join(10000);

				/**
				 * [tSystem_1 begin ] stop
				 */
				/**
				 * [tSystem_1 main ] start
				 */

				currentComponent = "tSystem_1";

				tos_count_tSystem_1++;

				/**
				 * [tSystem_1 main ] stop
				 */
				/**
				 * [tSystem_1 end ] start
				 */

				currentComponent = "tSystem_1";

				globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

				ok_Hash.put("tSystem_1", true);
				end_Hash.put("tSystem_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tSystem_1_EXIT_VALUE")).equals(0)) {

					tSystem_2Process(globalMap);
				}

				if (!((Integer) globalMap.get("tSystem_1_EXIT_VALUE"))
						.equals(0)) {

					tSystem_3Process(globalMap);
				}

				/**
				 * [tSystem_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}

	public void tSystem_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSystem_2 begin ] start
				 */

				ok_Hash.put("tSystem_2", false);
				start_Hash.put("tSystem_2", System.currentTimeMillis());
				currentComponent = "tSystem_2";

				int tos_count_tSystem_2 = 0;

				Runtime runtime_tSystem_2 = Runtime.getRuntime();

				String[] env_tSystem_2 = null;
				java.util.Map<String, String> envMap_tSystem_2 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_2 = new java.util.HashMap();
				envMapClone_tSystem_2.putAll(envMap_tSystem_2);

				final Process ps_tSystem_2 = runtime_tSystem_2.exec(
						new String[] {
								"/bin/sh",
								"-c",
								"hadoop fs -rm "
										+ (String) globalMap
												.get("partitionFile") },
						env_tSystem_2);

				globalMap.remove("tSystem_2_OUTPUT");
				globalMap.remove("tSystem_2_ERROROUTPUT");

				Thread normal_tSystem_2 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_2
											.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_2.start();

				Thread error_tSystem_2 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_2
											.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_2.start();
				if (ps_tSystem_2.getOutputStream() != null) {
					ps_tSystem_2.getOutputStream().close();
				}
				ps_tSystem_2.waitFor();
				normal_tSystem_2.join(10000);
				error_tSystem_2.join(10000);

				/**
				 * [tSystem_2 begin ] stop
				 */
				/**
				 * [tSystem_2 main ] start
				 */

				currentComponent = "tSystem_2";

				tos_count_tSystem_2++;

				/**
				 * [tSystem_2 main ] stop
				 */
				/**
				 * [tSystem_2 end ] start
				 */

				currentComponent = "tSystem_2";

				globalMap.put("tSystem_2_EXIT_VALUE", ps_tSystem_2.exitValue());

				ok_Hash.put("tSystem_2", true);
				end_Hash.put("tSystem_2", System.currentTimeMillis());

				if (((Integer) globalMap.get("tSystem_2_EXIT_VALUE")).equals(0)) {

					tSystem_4Process(globalMap);
				}

				/**
				 * [tSystem_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tSystem_2_SUBPROCESS_STATE", 1);
	}

	public void tSystem_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSystem_4 begin ] start
				 */

				ok_Hash.put("tSystem_4", false);
				start_Hash.put("tSystem_4", System.currentTimeMillis());
				currentComponent = "tSystem_4";

				int tos_count_tSystem_4 = 0;

				Runtime runtime_tSystem_4 = Runtime.getRuntime();

				String[] env_tSystem_4 = null;
				java.util.Map<String, String> envMap_tSystem_4 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_4 = new java.util.HashMap();
				envMapClone_tSystem_4.putAll(envMap_tSystem_4);

				final Process ps_tSystem_4 = runtime_tSystem_4.exec(
						new String[] {
								"/bin/sh",
								"-c",
								"hive -e \"load data local inpath '"
										+ (String) globalMap.get("newFile")
										+ "' into table " + context.tablename
										+ " partition(pt_d='"
										+ (String) globalMap.get("pt_d")
										+ "');\"" }, env_tSystem_4);

				globalMap.remove("tSystem_4_OUTPUT");
				globalMap.remove("tSystem_4_ERROROUTPUT");

				Thread normal_tSystem_4 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_4
											.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_4.start();

				Thread error_tSystem_4 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_4
											.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_4.start();
				if (ps_tSystem_4.getOutputStream() != null) {
					ps_tSystem_4.getOutputStream().close();
				}
				ps_tSystem_4.waitFor();
				normal_tSystem_4.join(10000);
				error_tSystem_4.join(10000);

				/**
				 * [tSystem_4 begin ] stop
				 */
				/**
				 * [tSystem_4 main ] start
				 */

				currentComponent = "tSystem_4";

				tos_count_tSystem_4++;

				/**
				 * [tSystem_4 main ] stop
				 */
				/**
				 * [tSystem_4 end ] start
				 */

				currentComponent = "tSystem_4";

				globalMap.put("tSystem_4_EXIT_VALUE", ps_tSystem_4.exitValue());

				ok_Hash.put("tSystem_4", true);
				end_Hash.put("tSystem_4", System.currentTimeMillis());

				if (((Integer) globalMap.get("tSystem_4_EXIT_VALUE")).equals(0)) {

					tFileDelete_1Process(globalMap);
				}

				/**
				 * [tSystem_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tSystem_4_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						(String) globalMap.get("newFile"));
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exists or is invalid.");
					throw new RuntimeException(
							"File does not exists or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", (String) globalMap
						.get("newFile"));

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tFileCopy_1Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_1 begin ] start
				 */

				ok_Hash.put("tFileCopy_1", false);
				start_Hash.put("tFileCopy_1", System.currentTimeMillis());
				currentComponent = "tFileCopy_1";

				int tos_count_tFileCopy_1 = 0;

				/**
				 * [tFileCopy_1 begin ] stop
				 */
				/**
				 * [tFileCopy_1 main ] start
				 */

				currentComponent = "tFileCopy_1";

				String srcFileName_tFileCopy_1 = context.filename;

				java.io.File srcFile_tFileCopy_1 = new java.io.File(
						srcFileName_tFileCopy_1);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_1.exists()
						|| !srcFile_tFileCopy_1.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_1
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_1 = context.backupdir
						+ (String) globalMap.get("backDate");

				String desFileName_tFileCopy_1 = srcFile_tFileCopy_1.getName();

				if (desFileName_tFileCopy_1 != null
						&& ("").equals(desFileName_tFileCopy_1.trim())) {
					desFileName_tFileCopy_1 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_1 = new java.io.File(
						desDirName_tFileCopy_1, desFileName_tFileCopy_1);

				if (!srcFile_tFileCopy_1.getPath().equals(
						desFile_tFileCopy_1.getPath())) {
					java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1
							.getParentFile();

					if (parentFile_tFileCopy_1 != null
							&& !parentFile_tFileCopy_1.exists()) {
						parentFile_tFileCopy_1.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(),
							desFile_tFileCopy_1.getPath(), true);
					java.io.File isRemoved_tFileCopy_1 = new java.io.File(
							context.filename);
					if (isRemoved_tFileCopy_1.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}

				String desFilePath_tFileCopy_1 = desFile_tFileCopy_1.getPath()
						.replaceAll("\\\\", "/");
				globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",
						desFilePath_tFileCopy_1);
				globalMap.put("tFileCopy_1_DESTINATION_FILENAME",
						desFile_tFileCopy_1.getName());
				String srcFilePathFolder_tFileCopy_1 = srcFileName_tFileCopy_1
						.replaceAll("\\\\", "/");
				desDirName_tFileCopy_1 = desDirName_tFileCopy_1.replaceAll(
						"\\\\", "/");
				srcFilePathFolder_tFileCopy_1 = srcFilePathFolder_tFileCopy_1
						.substring(0, srcFilePathFolder_tFileCopy_1
								.lastIndexOf("/") + 1);
				globalMap.put("tFileCopy_1_SOURCE_DIRECTORY",
						srcFilePathFolder_tFileCopy_1);
				globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY",
						desDirName_tFileCopy_1);

				tos_count_tFileCopy_1++;

				/**
				 * [tFileCopy_1 main ] stop
				 */
				/**
				 * [tFileCopy_1 end ] start
				 */

				currentComponent = "tFileCopy_1";

				ok_Hash.put("tFileCopy_1", true);
				end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				tJava_4Process(globalMap);

				/**
				 * [tFileCopy_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println("Complete process file " + context.filename
						+ " to table ODS_AD_ACTIVITY_LABEL_DM.");

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tSystem_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSystem_3 begin ] start
				 */

				ok_Hash.put("tSystem_3", false);
				start_Hash.put("tSystem_3", System.currentTimeMillis());
				currentComponent = "tSystem_3";

				int tos_count_tSystem_3 = 0;

				Runtime runtime_tSystem_3 = Runtime.getRuntime();

				String[] env_tSystem_3 = null;
				java.util.Map<String, String> envMap_tSystem_3 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_3 = new java.util.HashMap();
				envMapClone_tSystem_3.putAll(envMap_tSystem_3);

				final Process ps_tSystem_3 = runtime_tSystem_3.exec(
						new String[] {
								"/bin/sh",
								"-c",
								"hive -e \"load data local inpath '"
										+ (String) globalMap.get("newFile")
										+ "' into table " + context.tablename
										+ " partition(pt_d='"
										+ (String) globalMap.get("pt_d")
										+ "');\"" }, env_tSystem_3);

				globalMap.remove("tSystem_3_OUTPUT");
				globalMap.remove("tSystem_3_ERROROUTPUT");

				Thread normal_tSystem_3 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_3
											.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_3.start();

				Thread error_tSystem_3 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(ps_tSystem_3
											.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_3.start();
				if (ps_tSystem_3.getOutputStream() != null) {
					ps_tSystem_3.getOutputStream().close();
				}
				ps_tSystem_3.waitFor();
				normal_tSystem_3.join(10000);
				error_tSystem_3.join(10000);

				/**
				 * [tSystem_3 begin ] stop
				 */
				/**
				 * [tSystem_3 main ] start
				 */

				currentComponent = "tSystem_3";

				tos_count_tSystem_3++;

				/**
				 * [tSystem_3 main ] stop
				 */
				/**
				 * [tSystem_3 end ] start
				 */

				currentComponent = "tSystem_3";

				globalMap.put("tSystem_3_EXIT_VALUE", ps_tSystem_3.exitValue());

				ok_Hash.put("tSystem_3", true);
				end_Hash.put("tSystem_3", System.currentTimeMillis());

				if (((Integer) globalMap.get("tSystem_3_EXIT_VALUE")).equals(0)) {

					tFileDelete_1Process(globalMap);
				}

				/**
				 * [tSystem_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tSystem_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ODS_AD_ACTIVITY_LABEL_DM ODS_AD_ACTIVITY_LABEL_DMClass = new ODS_AD_ACTIVITY_LABEL_DM();

		int exitCode = ODS_AD_ACTIVITY_LABEL_DMClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ODS_AD_ACTIVITY_LABEL_DM.class
					.getClassLoader().getResourceAsStream(
							"bi_ods_2_2/ods_ad_activity_label_dm_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.tablename = (String) context.getProperty("tablename");

			context.tablelocation = (String) context
					.getProperty("tablelocation");

			context.rejectdir = (String) context.getProperty("rejectdir");

			context.pushtime = (String) context.getProperty("pushtime");

			context.hadoopdir = (String) context.getProperty("hadoopdir");

			context.filename = (String) context.getProperty("filename");

			context.backupdir = (String) context.getProperty("backupdir");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("tablename")) {
				context.tablename = (String) parentContextMap.get("tablename");
			}
			if (parentContextMap.containsKey("tablelocation")) {
				context.tablelocation = (String) parentContextMap
						.get("tablelocation");
			}
			if (parentContextMap.containsKey("rejectdir")) {
				context.rejectdir = (String) parentContextMap.get("rejectdir");
			}
			if (parentContextMap.containsKey("pushtime")) {
				context.pushtime = (String) parentContextMap.get("pushtime");
			}
			if (parentContextMap.containsKey("hadoopdir")) {
				context.hadoopdir = (String) parentContextMap.get("hadoopdir");
			}
			if (parentContextMap.containsKey("filename")) {
				context.filename = (String) parentContextMap.get("filename");
			}
			if (parentContextMap.containsKey("backupdir")) {
				context.backupdir = (String) parentContextMap.get("backupdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputProperties_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputProperties_1) {

			e_tFileInputProperties_1.printStackTrace();
			globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ODS_AD_ACTIVITY_LABEL_DM");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 99525 characters generated by Talend Open Studio for Data Integration on the
 * 2013年8月29日 下午09时01分49秒
 ************************************************************************************************/
