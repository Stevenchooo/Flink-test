<reportIndexGroup>
<!--
//[内容结算]SVOD 和 TVOD 差别在于:productType(产品类型:1，商品[点播]、2，合约[cycleType 日套餐、周套餐、月套餐])
//
//[EDC]中TVOD 展示主键 {projectid[筛选]、 providerid[筛选]、 contentid}
//[EDP]中TVOD 展示主键 {projectid[固定]、 providerid[筛选]、 contentid}
//注意：由于点播中(productType = 1) cycleType只有一种情况(无值)。
-->
<!--
CP播放时长占比CP（日套餐）=
（该CP当月日套餐1 SVOD播放总时长+该CP当月日套餐2 SVOD播放总时长+…++该CP当月日套餐N SVOD播放总时长）÷
（所有CP当月日套餐1 SVOD播放总时长+所有CP当月日套餐2 SVOD播放总时长+…++所有CP当月日套餐N SVOD播放总时长）
即：
某CP播放时长占比 = [相同cycleType]的套餐时长之和/所有CP[相同cycleType]的套餐时长之和
-->
    <multiHqlReportIndexs>
		<!--当期 SVOD播放总时长	totalplaytime 订购套餐用户播放套餐内容的总时长（含免费期播放时长）-->
		<multiHqlReportIndex>
            <indexKey>video.content.settlement.single.totalplaytime.d</indexKey>
            <fieldName>totalplaytime</fieldName>
            <hql>
                <![CDATA[
				select projectid,providerid,productid,contentid,dtime,
					   sum(totalplaytime) totalplaytime
				  from (select if(tt.projectid is null, 'none', tt.projectid) projectid,
							   if(tt.providerid is null, 'none', tt.providerid) providerid,
							   if(tt.productid is null, 'none', tt.productid) productid,
							   if(tt.contentid is null, 'none', tt.contentid) contentid,
							   dtime,
							   identityid,
							   (unix_timestamp(tt.endtime, 'yyyyMMddHHmmss') - unix_timestamp(tt.starttime, 'yyyyMMddHHmmss')) totalplaytime
						  from (select projectid,providerid,productid,contentid,t.date dtime,
									   identityid,starttime,endtime
								  from video.t_cdr_vod_watch_event t
								 where t.date > from_unixtime(unix_timestamp(date_sub(from_unixtime(unix_timestamp('{STARTTIME}',
												'yyyyMMdd'),'yyyy-MM-dd'),3),'yyyy-MM-dd'),'yyyyMMddHHmmss')
								   and t.date < '{ENDTIME}'
								union all
								select projectid,
									   t.spid             providerid,
									   productid,
									   t.logicalchannelid contentid,
									   t.date             dtime,
									   identityid,
									   starttime,
									   endtime
								  from video.t_cdr_livetv_watch_event t
								 where t.date > from_unixtime(unix_timestamp(date_sub(from_unixtime(unix_timestamp('{STARTTIME}',
												'yyyyMMdd'),'yyyy-MM-dd'),3),'yyyy-MM-dd'),'yyyyMMddHHmmss')
								   and t.date < '{ENDTIME}') tt
						) tb
				 group by projectid, providerid, productid, contentid, dtime
                ]]>
            </hql>
        </multiHqlReportIndex>
		<!--当期 付费用户SVOD播放时长 playtime 在正式订购套餐用户播放该内容的时长（免费期不计算时长）-->
		<multiHqlReportIndex>
            <indexKey>video.content.settlement.single.playtime.d</indexKey>
            <fieldName>playtime</fieldName>
            <hql>
                <![CDATA[
				select projectid,providerid,productid,contentid,dtime,
					   sum(formalplaytime) playtime
				  from (select if(tt.projectid is null, 'none', tt.projectid) projectid,
							   if(tt.providerid is null, 'none', tt.providerid) providerid,
							   if(tt.productid is null, 'none', tt.productid) productid,
							   if(tt.contentid is null, 'none', tt.contentid) contentid,
							   dtime,
							   identityid,
							   playtime formalplaytime
						  from (select projectid,providerid,productid,contentid,dtime,identityid,status,
									   (unix_timestamp(ts.endtime, 'yyyyMMddHHmmss') - unix_timestamp(ts.starttime, 'yyyyMMddHHmmss')) playtime
								  from (select tr.projectid,tr.providerid,tr.productid,tr.contentid,tr.dtime,tr.identityid,tr.starttime,tr.endtime,tr.status
										  from (select t1.projectid,t1.providerid,t1.productid,t1.contentid,t1.dtime,t1.identityid,t1.starttime,t1.endtime,t2.status,t2.time, 
													   row_number() over(partition by t1.projectid, t1.providerid, t1.productid, t1.contentid, t1.identityid, t1.starttime, t1.endtime order by t2.time desc) as rank
												  from (select projectid,providerid,productid,contentid,identityid,starttime,endtime,t.date dtime
														  from video.t_cdr_vod_watch_event t
														 where t.date > from_unixtime(unix_timestamp(date_sub(from_unixtime(unix_timestamp('{STARTTIME}',
																		'yyyyMMdd'),'yyyy-MM-dd'),3),'yyyy-MM-dd'),'yyyyMMddHHmmss')
															and t.date < '{ENDTIME}') t1
												 left join (select projectid,productid,userid,status,time,dtime
															  from video.T_MID_ORDERSTATUS t
															 where t.dtime > '{STARTTIME}'
															   and t.dtime < '{ENDTIME}') t2
													on t1.projectid = t2.projectid
												   and t1.productid = t2.productid
												   and t1.identityid = t2.userid
												   and t1.dtime = t2.dtime
												 where t1.starttime >= t2.time
												   and t2.userid is not null
											) tr
										 where tr.rank = 1
										   and tr.status in(1,3,9)
									) ts
							) tt
					union all
						select if(tt.projectid is null, 'none', tt.projectid) projectid,
							   if(tt.providerid is null, 'none', tt.providerid) providerid,
							   if(tt.productid is null, 'none', tt.productid) productid,
							   if(tt.contentid is null, 'none', tt.contentid) contentid,
							   dtime,
							   identityid,
							   playtime formalplaytime
						  from (select projectid,providerid,productid,contentid,dtime,identityid,status,
									   (unix_timestamp(ts.endtime, 'yyyyMMddHHmmss') - unix_timestamp(ts.starttime, 'yyyyMMddHHmmss')) playtime
								  from (select tr.projectid,tr.providerid,tr.productid,tr.contentid,tr.dtime,tr.identityid,tr.starttime,tr.endtime,tr.status
										  from (select t1.projectid,t1.providerid,t1.productid,t1.contentid,t1.dtime,t1.identityid,t1.starttime,t1.endtime,t2.status,t2.time, 
													   row_number() over(partition by t1.projectid, t1.providerid, t1.productid, t1.contentid, t1.identityid, t1.starttime, t1.endtime order by t2.time desc) as rank
												  from (select projectid,t.spid providerid,productid,t.logicalchannelid contentid,identityid,starttime,endtime,t.date dtime
														  from video.t_cdr_livetv_watch_event t
														 where t.date > from_unixtime(unix_timestamp(date_sub(from_unixtime(unix_timestamp('{STARTTIME}',
																		'yyyyMMdd'),'yyyy-MM-dd'),3),'yyyy-MM-dd'),'yyyyMMddHHmmss')
															and t.date < '{ENDTIME}') t1
												 left join (select projectid,productid,userid,status,time,dtime
															  from video.T_MID_ORDERSTATUS t
															 where t.dtime > '{STARTTIME}'
															   and t.dtime < '{ENDTIME}') t2
													on t1.projectid = t2.projectid
												   and t1.productid = t2.productid
												   and t1.identityid = t2.userid
												   and t1.dtime = t2.dtime
												 where t1.starttime >= t2.time
												   and t2.userid is not null
											) tr
										 where tr.rank = 1
										   and tr.status in(1,3,9)
									) ts
							) tt
					) ttt
				 group by projectid,providerid,productid,contentid,dtime
                ]]>
            </hql>
        </multiHqlReportIndex>
		
		<!--
		//20170227
		//先只考虑使用支付账号统计；
		//代付情况现在未考虑。
		-->
		<!--当期 付费订购用户 总共 付费金额 income[美元]、 localincome[本币]-->
		<!--当期 付费订购用户数 payuser	正式订购该套餐产品，并成功付费的用户数-->
		<!--当期 付费订购用户数 paytimes 正式订购该套餐产品，并成功付费的次数-->
		<!--201708 屏蔽contentid出现none的情况  -->
		<!-- 
		<multiHqlReportIndex>
            <indexKey>video.content.settlement.single.payuserincome.d</indexKey>
            <fieldName>income,localincome,payuser,paytimes</fieldName>
            <hql>
                <![CDATA[
				select projectid,providerid,productid,contentid,dtime,
					   sum(fee_usd) income,
					   sum(fee) localincome,
					   count(distinct(identityid)) payuser,
					   count(identityid) paytimes
				  from (select if(t1.projectid is null, 'none', t1.projectid)  projectid,
							   if(t2.providerid is null, 'none', t2.providerid) providerid,
							   if(t1.productid is null, 'none', t1.productid) productid,
							   if(t1.contentid is null, 'none', t1.contentid) contentid,
							   t1.dtime,
							   if(t1.fee is null, 0, t1.fee) fee,
							   if(t1.fee_usd is null, 0, t1.fee_usd) fee_usd,
							   t1.identityid
						  from (select projectid,t.productnumber productid,t.content_id contentid,t.date dtime,fee,fee_usd,identityid
								  from video.t_cdr_top_payment_info t
								 where t.date > '{STARTTIME}'
								   and t.date < '{ENDTIME}') t1
						  left join (select code, t.ownerid providerid
									   from video.t_cdr_dic_content_manage t) t2
							on t1.contentid = t2.code
				  )tt
				group by projectid,providerid,productid,contentid,dtime 
                ]]>
            </hql>
        </multiHqlReportIndex>-->
		
		<!--内容名称 contentname -->
		<!--归属合作伙伴 companyname-->
		<!--产品类型 productcatalog 注 ：20170223指标修改为 订购类型 cycletype -->
		<!--产品描述 productdesc -->
		<!--产品单价 originalPrice -->
		<multiHqlReportIndex>
            <indexKey>video.content.settlement.single.property.d</indexKey>
            <fieldName>contentname,companyname,producttype,cycletype,productdesc,originalprice</fieldName>
            <hql>
                <![CDATA[
				select projectid,providerid,productid,contentid,dtime,
					   contentname,
					   companyname,
					   producttype,
					   cycletype,
					   productdesc,
					   originalprice
				  from (select r1.projectid,r1.providerid,r1.productid,r1.contentid,r1.dtime,r1.producttype,r1.cycletype,r1.productdesc,r1.originalprice,
							   if(r2.companyname is null,r1.providerid,r2.companyname) companyname,r1.contentname
						  from (select s1.projectid,s1.providerid,s1.productid,s1.contentid,s1.dtime,s1.producttype,s1.cycletype,s1.productdesc,s1.originalprice,
									   if(s2.contentname is null,s1.contentid,s2.contentname) contentname
								  from (select t1.projectid,t1.providerid,t1.productid,t1.contentid,t1.dtime,
											   t2.producttype,t2.cycletype,t2.productdesc,t2.originalprice
										  from (select projectid,providerid,productid,contentid,dtime
												  from video.t_video_settlement_content_single_d_hbase t
												 where t.dtime > '{STARTTIME}'
												   and t.dtime < '{ENDTIME}'
											) t1
										  left join (select aa.productid,aa.producttype,aa.cycletype,aa.productdesc,aa.originalprice
													   from (select productid,producttype,cycletype,productdesc,originalprice,
													                row_number() over(partition by productid order by operationtime desc) as rn
                                                               from video.t_cdr_top_product_info t) aa
                                                      where aa.rn=1
											) t2
											on t1.productid = t2.productid
									) s1
								  left join (select code, name contentname
											  from video.t_cdr_dic_content_manage t
									) s2
									on s1.contentid = s2.code
							) r1
						  left join (select aa.provideridinlocal partnerid,aa.companyname
									   from (
											 select provideridinlocal, companyname,
													row_number() over(partition by provideridinlocal order by companyname ) as rn
												 from video.t_cdr_cp_relation
									   ) aa
									  where aa.rn=1
							) r2
							on r1.providerid = r2.partnerid 
					) tt
				 group by projectid,providerid,productid,contentid,dtime,
						  contentname,
						  companyname,
						  producttype,
						  cycletype,
						  productdesc,
						  originalprice
                ]]>
            </hql>
        </multiHqlReportIndex>
		
    </multiHqlReportIndexs>
</reportIndexGroup>
