<?xml version="1.0" encoding="UTF-8"?>
<ciCloudJob>
    <scm>
        <tasks/>
        <config>
		    <!-- 配置库属性名[key]不能有中文，如果配置库属性值[value]包含中中文，请确保此配置文件的编码设置:encoding="GBK"-->
		    <!-- 下载配置<svn>、<cc>和<customDown>节点上都支持3个属性：retryTimes retryIntervalMinutes deleteBeforeLastRetry-->
		    <!-- retryTimes表示下载失败的重试次数，不设置或者设置错误的值（如非数值或者负数等），则使用默认值3。注意若设置为0，则表示不重试。-->
		    <!-- retryIntervalMinutes表示两次重试之间的时间间隔，单位分钟，不设置或者设置错误的值（如非数值或者负数等），则使用默认值1。注意若设置为0，则表示重试时不用等待时间。-->
		    <!--deleteBeforeLastRetry表示最后一次重试前是否要删除原来的下载内容，不设置或者设置错误的值（除了true/false以外的值），则使用默认值false,表示不删除-->
		    <!-- 与master主机中的 svndownloadconfig.xml 相同，主要是获取CI目录 -->
           <svn name="config" retryTimes="3" retryIntervalMinutes="1" deleteBeforeLastRetry="false">
		       <property  key="svn_server_url" value="https://szxsvn06-ex:3690/svn/TC_EMUI_DataService_SVN/BICode/MarketingSystem/Trunk/Marketing/CI"/>
		       <property  key="svn_name" value="z00280396"/>
		       <property  key="svn_password" value="1d1a0f2c9e8fea84dc8ab4f6f3587d74"/>		
		       <property  key="svn_revision" value=""/>  
	        </svn>
        </config>
        <current>
			<!-- 一个子系统有多个配置库，则配置多个节点-->
			<!-- 代码标签(ClearCase为cc_viewTag，SVN为svn_revision)：
				代码标签为空时，表示在研版本，每次构建取最新代码，CI工程将定时构建；
				代码标签不为空，表示历史版本，每次按代码标签取代码构建，由依赖本平台的产品CI触发构建-->
			<!-- 下载代码<svn>、<cc>和<customDown>节点上都支持3个属性：retryTimes retryIntervalMinutes deleteBeforeLastRetry-->
			<!-- retryTimes表示下载失败的重试次数，不设置或者设置错误的值（如非数值或者负数等），则使用默认值3。注意若设置为0，则表示不重试。-->
			<!-- retryIntervalMinutes表示两次重试之间的时间间隔，单位分钟，不设置或者设置错误的值（如非数值或者负数等），则使用默认值1。注意若设置为0，则表示重试时不用等待时间。-->
			<!--deleteBeforeLastRetry表示最后一次重试前是否要删除原来的下载内容，不设置或者设置错误的值（除了true/false以外的值），则使用默认值false,表示不删除-->
			<!--svn_excludeDir 用于svn更新过滤目录，配置为工程相对目录，可不配置，不支持中文字符与特殊字符-->
			<!--isDeleteModifiedFiles 用来标识是否在执行代码更新下载之前删除被修改的svn文件，取值为true或者false，配置成非true的其他字符串或者不配置该项都默认为false-->
		    <!--样例SVN -->
			<svn  name="Marketing" >
				<property  key="svn_server_url" value="https://szxsvn06-ex:3690/svn/TC_EMUI_DataService_SVN/BICode/MarketingSystem/Trunk/Marketing"/>
				<property  key="svn_name" value="z00280396"/>
				<property  key="svn_password" value="1d1a0f2c9e8fea84dc8ab4f6f3587d74"/>		
				<property  key="svn_revision" value=""/>
				<!--property  key="svn_excludeDir" value="source/java;CI/script" /-->
				<!--property  key="isDeleteModifiedFiles" value="false" /-->
			</svn>
			
			<!--样例CC-->
			<!-- 
			<cc name="sampleproject"  retryTimes="3" retryIntervalMinutes="1" deleteBeforeLastRetry="false">
					<property  key="cc_ViewServer" value="\\szxccvw15-rd"/>
					<property  key="cc_ViewStorage" value="CRDU_ICP_Views"/>
					<property  key="cc_viewTag" value="MA5600_CC198"/>
					<property  key="cc_down_user" value="d00147494"/>
					<property  key="cc_down_password" value="ec7217a854949a1f728f77f5fc4aa5fa"/>
					<property  key="cc_ViewConfigSpec" value="element * CHECKEDOUT \r\nelement * /main/LATEST \r\nload \ICP_TEST\zt1\BX1  \r\nload \ICP_TEST\zt0\new_u2k"/>
					<property  key="cc_groups" value="wx_rnc_sig;wx_rnc_version;wx_rnc_writer;"/>
					<property  key="cc-primary-group" value="WL-mbsctd_ccuser"/>
			 -->
					<!--
						cc_text_mode取值：transparent、insert_cr、strip_cr ,也可以不配置该参数。各个参数的使用场景：
						transparent ：不处理任何一行的结尾，也就是什么转换都不做
						insert_cr ：当Unix的客户端使用transparent mode时，在windows端使用该种模式
						strip_cr：当windows的客户端使用transparent mode时，在Unix客户端使用该种模式。					
					-->
					<!--property  key="cc_text_mode" value="insert_cr"/-->
			<!-- 
					<property  key="AtriaRegy" value="szxccrg01-rd"/>
					<property  key="Region" value="Windows"/>
					<property  key="LicenseHost" value="szxrnd31-fs"/>
					<property  key="ClearCaseGroupName" value="CHINA\\clearcase"/>
					<property  key="ProjectRoot" value="\\\\szxccvw15-rd\\CRDU_ICP_Views\\Profiles"/>
					<property  key="InstallConfiguration" value="dword:000005a2"/>
			</cc>
			 -->
			<!-- syncBaseline插件使用样例 -->
			<!-- 用户使用该插件从一台指定机器的文件目录下载代码 -->
			<!-- host值配置指定机器的IP -->
			<!-- baselineSource值配置机器上的指定文件目录 -->
			<!-- username值配置指定机器的登录名，如：机器名\登陆账号 -->
			<!-- password值配置指定机器的登录密码（使用密文） -->
			<!-- isGetBaselineVersion值配置是否需要获取基线版本和基线创建时间，缺省和配空或配错默认为true，
			（1）同步其他工程制作的基线代码时配为true, （2）从远程同步非制作基线代码时请配置为false -->
			<!--使用条件：1、指定机器的默认共享打开（即D:默认共享为D$,C:默认共享为C$）
			              2、指定机器的Workstation服务启用-->
			<!--样例customDown
			<customDown  name="Baseline" plugin="syncBaseline">
				<param  name="host" value="10.62.235.76"/>
				<param  name="baselineSource" value="D:/build/FileManger_Internet_version/code/current"/>
				<param  name="username" value="SZX1000016720\administrator"/>		
				<param  name="password" value="09ddc652a760cfce6f1555d5f2c0b90f"/>
                <param  name="isGetBaselineVersion" value="true"/>			
            </customDown>
            -->
        </current>
        <base/>
    </scm>
    
    <!-- 定义构建任务 -->
    <agentTasks>
		<!--
			1.这里是定义所有agentTask
			2.agentTask下的所有task默认顺序执行
			3.compile、package和自定义任务必须使用name属性配置在CIConfig.xml中定义的任务
			4.使用标准插件的静态检查任务(cct/pclint/sourcemonitor/simian)必须使用module属性配置在ModuleConfig.xml中定义的模块名称
			5.配置文件中的标签，属性名，值不能包含有中文
			6.支持使用priority参数定义任务优先级，优先级从0～10依次升高，若不定义，默认为0.
			7.支持使用timeoutMinutes参数指定该任务的超时时间，单位分钟。若不设置，或者设置的值小于等于0，或者设置的值不是数值，则认为不超时。
			8.支持使用retryTimes参数指定任务失败（包括任务超时）后任务的重试次数。不设置则不重试。
			9.支持使用 parallel 用于指定是否需要要分配到的那个agent上并行执行那些task(配置为true表示要并行执行；不配置或配置为其它值，都会串行执行)
			10.支持使用syncCodeFlag用于指定是否需要agent从pom上同步代码，可设置为："true"、"false"、默认（不配、配错或者不添加此属性）,"true":强制同步代码，"false"：强制不同步代码，默认：在一个agent上只同步一次代码。
			11.支持使用agentLabel用于指定任务运行时需要的agent的资源标签，agent的资源标签在RPM界面上查看。
			12.支持使用dependPlatformIDs用于指定任务运行时的依赖平台id，多个用";"分开，依赖平台的id在云配置界面的依赖平台处配置。
		-->
	    <agentTask  name ="compile_common" agentLabel="EMUI_CI_BI"  failOnError="true">	
			<task plugin="compile" name="compile" module=""  depends=""/>
			<task plugin="findbugs" name="findbugs" module=""  depends=""/>
		</agentTask>
	   <!--  <agentTask  name ="compile_package_client" agentLabel="compile"  failOnError="true">	
            <task plugin="compile" name="compile_client"/>
			<task plugin="package" name="package_client"/>	
		</agentTask>
	    <agentTask  name ="compile_package_server" agentLabel="compile"  failOnError="true">	
            <task plugin="compile" name="compile_server"/>
			<task plugin="package" name="package_server"/>	
		</agentTask>
		 -->
		 <agentTask  name ="cct_simian_sourcemonitor" agentLabel="EMUI_BI_COMPILE" >	
            <!-- <task plugin="cct" name="cct_client" module="client"  depends=""/>	 -->
            <task plugin="cct" name="cct" module="Marketing"   depends=""/>s					
			<task plugin="simian" name="simian" module="Marketing"  depends=""/>						
			<task plugin="sourcemonitor" name="sourcemonitor" module="Marketing" depends=""/>
			
						
			<!--  
            <task plugin="simian" name="simian_client" module="client"  depends=""/>	
			<task plugin="sourcemonitor" name="sourcemonitor_client" module="client"  depends=""/>
			 -->
		</agentTask>
		 <agentTask  name ="checkstyle_pmd" agentLabel="EMUI_BI_COMPILE" >	
            <task plugin="checkstyle" name="checkstyle" depends=""/>
            
            <task plugin="pmd" name="pmd" depends=""/>	
           
			<!--  <task plugin="pclint" name="pclint_c" module="c"  depends=""/>
			-->
		</agentTask>
    </agentTasks>
	
    <workingcopy>
		<param   name="workingsystem" value="MyProject"/>  <!-- 开发人员工作的代码子系统，用于与基线对比 -->
		<param   name="sourcepath" value="../.."/>   <!-- 本地代码相对于IDE的目录 -->
		<param   name="limit" value="5"/>   <!--超过数量不同步；默认不受限-->
		<!-- 以下四个属性用于平台-产品联调访问全量代码，用于平台开发人员选择换产品文件的路径；基线对比是否可用此目录？ -->
		<param   name="baselineHost" value="10.62.232.113"/>  <!-- 对比服务地址，最好用产品的构建POM；工程内有产品、平台的全部代码 -->
		<param   name="baselineCodeRoot" value="D:/pom/PrivateBuild/code/current"/>  <!-- 对比服务器上代码根路径 -->
		<param   name="baselineUsername" value="SZX1000023493\administrator"/> <!-- 访问用户 -->
		<param   name="baselinePassword" value="5b7411646c8c416c6f1555d5f2c0b90f"/> <!-- 访问密码 -->
	</workingcopy>

    <!-- 定义构建流程 -->
    <schedule>
		<!--schedule下面可以定义一个downTasks和多个concurrent、composite、agentTask节点-->
        <downTasks   name="DownloadCode" failOnError="true">　<!--downTasks节点是必须有的，且只能有一个; 它支持failOnError-->
			<!--downTask节点可以有多个；每个节点指定一个下载任务；增加isBase表示它是<base>里的任务-->
            <downTask name="Marketing" />
           
           <!--  <downTask name="Baseline" />  -->
        </downTasks>
		<!--concurrent表示并行任务集，即它的直接子节点是并行执行的；composite表示串行任务集-->
		<!--concurrent、composite可以互相嵌套、支持多结嵌套、需要填name属性(name值不要与其它concurrent/composite/agentTask/task重名)、不支持failOnError-->
        <composite name="build_check">
			<!--<composite name="package_All">
				<agentTask name="compile_commom" />agentTask必须是在agentTasks里面定义好的，用name字段指定是哪个agentTask
				 <concurrent name="build_package">
					<agentTask name="compile_package_client" />
					<agentTask name="compile_package_server" />
				</concurrent>
				 
			</composite>
			-->
			<agentTask name="compile_common" />
			<agentTask name="cct_simian_sourcemonitor" /> 
			<agentTask name="checkstyle_pmd" /> 
		</composite>
    </schedule>
</ciCloudJob>