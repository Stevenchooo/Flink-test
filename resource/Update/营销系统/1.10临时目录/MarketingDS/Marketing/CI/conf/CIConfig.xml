<?xml version="1.0" encoding="UTF-8"?>
<ciConfig version="1.0">
	<!--
		================================"此配置文件中使用相对路径时的规则"=====================================
		所有相对路径从子系统名称开始，子系统名称指scm.xml中配置的svn或cc节点的name属性值，此名称在配置库上不存在。
		=======================================================================================================
	    run.analyse.with.baseCode 配置是否要生成基于代码的差异报告
		run.analyse.with.baseReport是否要生成基于基线报告的差异报告。
			注1： 如果不配，这两个值都会默认为true 。
			注2： 基线报告需要放到配置所在的配置库中与conf平级的basereports目录里（创建basereports时，请注意区分大小写）。
		plugin.pclint.runEA　用于配置执行pclint时，是否使用EA. 默认为false
		run.compile.maxErrorNumber和run.compile.maxWarningNumber用于配置编译后解析错误与警告的最大个数，超过该数目将显示为大于该值，可以不配，默认值为100。
		run.compile.userRegexfile用于自定义用户的解析编译输出中的错误与警告的正则表达式文件（填写以CI为根目录的相对路径）;不配置或配置为空串，会使用系统内置的regex.xml。
		
		robocopy.exclude和rsync.exclude分别用于配置robocopy和rsync的过滤条件，Windows Agent默认使用robocopy，Linux Agent使用rsync，多个过滤条件间以英文分号分隔，不配置时(配置为空格或者配置为空)，默认过滤.svn、.hg的文件夹。配置规则:	
		1、在所有目录下，过滤特定文件夹PIN，则配置为"PIN"；		2、过滤指定文件夹subsystem1/source/PIN，则配置为"subsystem1/source/PIN"(此为相对路径配置方式)；		
		3、在所有目录下，过滤所有txt类型的文件，则配置为"*.txt"；		
		4、在所有目录下，过滤指定文件Tool.java，则配置为"*Tool.java"；
		5、过滤指定目录下的指定文件subsystem1/source/cpp/src/MoneyApp.cpp,则配置为"subsystem1/source/cpp/src/MoneyApp.cpp"。			
	-->
	<baseproperties>
		<property name="run.analyse.with.baseCode" value="true"/>
		<property name="run.analyse.with.baseReport" value="true"/>
		<property name="plugin.pclint.runEA" value="false" />
		<property name="run.compile.maxErrorNumber" value="100" />
		<property name="run.compile.maxWarningNumber" value="100" />
		<!--property name="run.compile.userRegexfile" value="compileRegex/regex.xml" /-->		
		<property name="robocopy.exclude" value=".svn;.hg" />
		<property name="rsync.exclude" value=".svn;.hg" />
	</baseproperties>
	<!-- ================================"此配置文件中使用相对路径时的规则"=====================================
		1.所有相对路径从子系统名称开始，子系统名称指scm.xml中配置的svn或cc节点的name属性值，此名称在配置库上不存在。
	-->
    <ruleSet>
        <!-- "配置Pclint文件，缺省使用defaultLntFile项配置的Pclint文件，各模块也可以配置通过lntFile参数配置自己的Pclint文件." -->
		<!--"配置Env信息，也是分别使用defaultEnv和env来指定缺省值和本模块自定义。"-->
		<!--"配置EmakeRoot信息，也是分别使用defaultEmakeRoot和emakeRoot来指定缺省值和本模块自定义。"-->
	    <!--"本模块未定义相关参数，就是用缺省值。"-->
		<pclint defaultLntFile="subsystem1/CI/rule/pclint/product.lnt" defaultEnv="TORNADO_HEAD=%TORNADO_2.2_HOME%\Tornado2.2PCC" defaultEmakeRoot="${env.TORNADO_2.2_HOME}">
			<module name="server" lntFile="subsystem1/CI/rule/pclint/std_server.lnt"     env="TORNADO_HEAD=%TORNADO_2.2_HOME%\Tornado2.2ARM" emakeRoot="${env.WINDRIVER_6.4_HOME}"/>
			<!--支持不同CPU类型，导入不同头文件，可动态设置环境变量 -->
			<module name="client" lntFile="subsystem1/CI/rule/pclint/std_client.lnt"     env="TORNADO_HEAD=%TORNADO_2.2_HOME%\Tornado2.2Mips"/>
		</pclint>
    </ruleSet>
	
	<!-- "编译任务" -->
    <compiles>
        <!-- "支持重定向日志输出，使用directionallogfile属性可以指定输出的日志文件的位置" -->
        <compile name ="compile" layerPath="/Marketing"  compiler="javac" compileFilePath="Marketing" compileFile="build.xml" directionallogfile="d:/testlog.txt">
			<result>
				<include name="Marketing\release\*.war"/>	   
			</result>
			<!--"直接上传到POM的发布路径下，实现发布"-->
			<release>
				<include name="Marketing\release\*.war"/>	   
			</release>
	    </compile>
		
    </compiles>
	
	<!-- "打包任务" --> 
    <packages> 
           <package name = "package_client"   workingDir="subsystem1/target/work/aiu/packagefile" executable = "package_client.xml"   argParam = "60" />
		   <package name = "package_all"      workingDir="subsystem1/target/work/aiu/packagefile" executable = "package_all.xml"     	argParam = "60" >
				<dependFiles >
					<include name="**/*.*"/>
				</dependFiles >
				<!-- result 为打包上传的文件,miniSize限制最小的文件总共大小,单位为M; include中指定的文件可以为具体路径，这种情况下会检查文件是否存在和是否为空,否则不允许上传。
				     注：使用miniSize时，include中指定的文件有通配符（星号、问号）时，不会检查是否存在，也不会计入这些文件的大小。-->
				<result miniSize="10">
					<include name="release/client.zip"/>
				</result>
				<!--compiles/packages/customTasks都可以使用log标签，用于定义用户要回收的日志文件; 它支持多个fileset、支持星号匹配-->
				<log>
					<fileset dir="${CODE_PATH}/subsystem1.config/CI">
						<include name="rule/pclint/env-xml.lnt" />
						<include name="tqe/**/*" />
						<exclude name="tqe/**/*.zip" />
					</fileset>
					<fileset dir="D:/subsystem1/logs">
						<include name="package_all.log" />
					</fileset>
				</log>
			</package>
	</packages>
	
	<!-- "自定义任务" --> 	
	<customTasks>
    
        <!-- checkstyle --> 
    	<task name="checkstyle" plugin="checkstyle" layerPath="/Marketing">
			<params>
				<param name="language" value="java"/>
				<param name="srcDir" value="Marketing/src"/>
			</params>
		</task>
		
		<!-- UADPGuarding --> 
		<task name="UADPGuarding" plugin="UADPGuarding">
			<params>
			<!--codeRelativePath：表示代码根目录相对${CODE_PATH}的相对路径。一般代码会被下载到${CODE_PATH}下的某个子目录中，
				这个子目录的名字由scm.xml中svn节点name属性值决定。所以codeRelativePath一般是和scm.xml中svn节点的name值一样。
				如果codeRelativePath不配置，那么工程代码路径就默认是${CODE_PATH}路径。
				注意：codeRelativePath首字母不要是斜杠-->
			<param name="codeRelativePath" value="Marketing/src"/>    
			<!--guardingProjectName：表示UADP-Guarding任务配置中心配置的工程名称。注意：工程名对字母大小写敏感。-->
			<param name="guardingProjectName" value="Marketing"/>
			</params>
		</task>
        
        <!-- pmd --> 
        <task name="pmd"  plugin="pmd" layerPath="/Marketing">
			<params>
				<param name="srcDir" value="Marketing/src"/>
			</params>
		</task>
		
		<!-- codecc --> 
        <task name="codecc"  plugin="CodeCC" layerPath="/codecc" WorkingDir="Marketing"  executable="build.bat" argParam="" echo="upload middle files">
			<params>
				<param name="iscompile" value="true"/>
				<param name="compileos" value="win64"/>
				<param name="mailto" value="l00166278,w84057406,qwx326383"/>
				<param name="mailcc" value="l00166278,w84057406,qwx326383" />
				<param name="CodeCC.concurrent" value="true" />
				<param name="component" value="" />
				<param name="checkrules" value="coverity,fortify"/>
				<param name="isincremental" value="false" />
				<param name="language" value="java"/>
				<param name="product" value=""/>
				<param name="version" value=""/>
				<param name="isDownloadReport" value="true"/>
			</params>
		</task>
		
		<!-- codedex --> 
        <task name="codedex"  plugin="CodeDEX" layerPath="/codedex" WorkingDir="Marketing"  executable="build.bat" argParam="" echo="upload middle files">
			<params>
				<param name="iscompile" value="true"/>
				<param name="issendemail" value="true"/>
				<param name="issendemail" value="true"/>
				<param name="compileos" value="win64"/>
				<param name="mailto" value="y84030100,w00296102,l00166278,qwx326383"/>
				<param name="mailcc" value="y84030100,w00296102,l00166278,qwx326383" />
				<param name="CodeCC.concurrent" value="true" />
				<param name="component" value="" />
				<param name="checkrules" value="coverity,fortify"/>
				<param name="isincremental" value="false" />
				<param name="language" value="java"/>
				<param name="product" value=""/>
				<param name="version" value=""/>
				<param name="isDownloadReport" value="true"/>
			</params>
		</task>

        <!-- findbugs -->
        <task name="findbugs" plugin="findbugs"  layerPath="/Marketing" >
            <params>
                <!--指定待检测类文件的路径id(必须)，main_class必须在moduleconfig.xml中定义 -->
                <param name ="classpathRefid" value="path.class.main"/>  
                <!--[非必填]pathId, 指定运行分析所依赖的类，包括但不限于源码编译依赖的库文件。该pathId必须在moduleconfig.xml中定义   -->
                <param name ="auxClasspathRefid" value="path.lib.main"/>
                <!--[非必填]指定待检测源码的路径id，main_src必须在moduleconfig.xml中定义 -->
                <param name ="pathRefidOfSources" value=""/>
                <!-- [非必填]定义生成报告时的报告的bug级别。取值范围【low,medium,high】,系统默认值为low
                <param name="reportLevel" value="low"/>　　                       -->
                <!-- [非必填]定义findbugs运行分析的bug级别。取值范围【min,default, max】,系统默认值为max
                <param name="effort " value="max"/>      -->
            </params>
        </task>

        <!-- junit -->
        <task name="junit" plugin="junit" layerPath="/Marketing" >
            <params>
                <param name ="classpathRefidOfTestcases" value="path.main"/>  
                <param name="classpathRefid" value="path.class.main"/>
                <param name ="srcTestDir" value="Marketing/test"/>
                <param name ="sourceFilesetDir" value="Marketing/src"/>
            </params>
        </task>
        
		<task name="TQE_java" plugin="TQE" layerPath="/TQE_java" workingDir="subsystem1/source/java" executable="build.xml"  argParam=""  echo="run TQE_java">
			<params>
				<!--param name="iscompile" value="true"/> 只支持true,不支持直接使用中间文件作检查
				<param name="tqeinputdir" value=""/>
				<param name="isincremental" value="false"/>-->
				<param name="compileos" value="linux32"/>
				<param name="mailto" value="a12345"/>
				<param name="mailcc" value="b123456"/>
				<param name="component" value=""/><!--请填写以${CONFIG_CI_ROOT}的CI目录为根目录的相对路径，如：script/componentUserList_java.xml-->
				<param name="checkrules" value="coverity"/>
				<param name="language" value="java"/> <!-- 支持c/c++/java -->
				<param name="fortifyexecutable" value=""/> <!--fortify工具中间件编译脚本, 非必填-->
				<!--pbi.id与subsystem会从内存里读出来-->
			</params>
		</task>
		<task name="dt_server"  plugin="dt"  layerPath="/server" workingDir="subsystem1/pctest/server" executable="dt_server.sh" argParam="" reportFile="subsystem1/pctest/XPUa_DMT/DTCenter.xml">
			<params>
				<param name="reportPath" value="/dtReport"/>
				<param name="testSuiteName" value="serverTestSuite"/>
			</params>
		</task>
		<task name="dt_client"  plugin="dt"  layerPath="/client" workingDir="subsystem1/pctest/client" executable="dt_client.sh" argParam="" reportFile="subsystem1/pctest/XPUa_DMT/DTCenter.xml">
			<params>
				<param name="reportPath" value="/dtReport/client"/>
				<param name="testSuiteName" value="clientTestSuite"/>
			</params>
		</task>
		<task name="custom_py" plugin="customtask" layerPath="/custom_py" workingDir="subsystem1.config/CI/script" executable="test_succ.py" argParam="" echo="run test_succ.py" reportFile="subsystem1/source/py/result.txt">
			<params>
				<!-- needSpecifyRunner默认为false,如果指定了为true,则在windows上执行脚本时，会使用这种方式“cmd /c python test.py”。(注：默认为“cmd /c test.py”)
					<param name="needSpecifyRunner" value="false"/>
				-->
			</params>
			<!--compiles/packages/customTasks都可以使用log标签，用于定义用户要回收的日志文件; 它支持多个fileset、支持星号匹配-->
			<log>
				<fileset dir="${CODE_PATH}/subsystem1.config/CI">
					<include name="rule/pclint/env-xml.lnt" />
					<include name="tqe/**/*" />
					<exclude name="tqe/**/*.zip" />
				</fileset>
				<fileset dir="D:/subsystem1/logs">
					<include name="custom_py.log" />
				</fileset>
			</log>	
		</task>
		<!--在执行ant的自定义任务时，可以在argParam中定义传入的参数。-->
		<task name="custom_ant" plugin="customtask" layerPath="/custom_ant" workingDir="subsystem1.config/CI/script" executable="build.xml" argParam="-Dparam1 = ? -Dparam2 = ? target1 target2" echo="run build.xml" reportFile="subsystem1/source/java/result.txt">
			<params>
			</params>
			<!--compiles/packages/customTasks都可以使用log标签，用于定义用户要回收的日志文件; 它支持多个fileset、支持星号匹配-->
			<log>
				<fileset dir="${CODE_PATH}/subsystem1.config/CI">
					<include name="rule/pclint/env-xml.lnt" />
					<include name="tqe/**/*" />
					<exclude name="tqe/**/*.zip" />
				</fileset>
				<fileset dir="D:/subsystem1/logs">
					<include name="custom_ant.log" />
				</fileset>
			</log>	
		</task>
		<!-- inFusion 插件的配置样例1 （指定路径进行检查）-->
		<task name ="inFusion_java_cloud_source" plugin="inFusion" layerPath="/inFusion_java_cloud"  workingdir="subsystem1/source/java">
            <params>
		        <param name="language" value="java"/>
	        </params>
        </task>
		<!-- inFusion 插件的配置样例2 （指定ifs文件进行检查）.-->
		<!-- 注意：若要使用.ifs文件的方式做架构检查，必须保证ifs文件中的代码路径和真正执行该任务的Agent机器上代码的存放路径保持一致，否则检查不到结果。-->
        <task name ="inFusion_cpp_cloud_ifs" plugin="inFusion" layerPath="/inFusion_cpp_cloud"  workingdir="subsystem1/source/inFusion_cpp.ifs">
            <params>
		        <param name="language" value="c++"/>
	        </params>
        </task>
		<!--maven样例,插件名称固定用maven-->
		<task name="mavenSample"  plugin="maven"  layerPath="/mavenSample">
			<params>
				<!--maven执行的核心构建文件及所在的相对路径，maven构建文件默认文件名一般为pom.xml。-->
				<param name="mavenPomFile" value="myMaven/others/pom.xml"/>
				<!--maven执行pom.xml的目标，如果为空，云构建环境下默认值执行:clean site。-->
				<param name="mavenGoal" value="clean site"/>
				<!--配置true:对构建报告的每一个模块进行解析，能够生成分层级的报告;配置false:表示对整个构建输出信息(如Error、Warning、Other等)进行解析，展示一个名称为maven的报告.不设置、设置为空或者设置错误的值（除了true/false以外的值），则使用默认值true。-->
				<param name="isStatic" value="true"/>
				<!--该参数在isStatic设置为true时才生效。配置false:表示分层分模块展示报告;配置true:表示展示扁平式的报告。不设置、设置为空或者设置错误的值（除了true/false以外的值），则使用默认值false。-->
				<param name="flatReport" value="false"/>
				<!--该参数在isStatic设置为true时才生效。配置值格式同模块名称(如：/a/b)，表示过滤该层级的报告不在CImaster报告中展示；如果b下面还有子模块，则底层的模块报告也不展示;支持配置过滤多个模块的报告，以英文逗号分隔。默认值为空。-->
				<param name="excludeProject" value=""/>
			</params>
		</task>
	</customTasks>
</ciConfig>