<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	
	<context:annotation-config />
	
	<context:component-scan	base-package="com.huawei.ide.beans,com.huawei.ide.daos,com.huawei.ide.services">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 引入外部属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!-- 数据源注册/数据库连接池DBCP -->	
	<bean id="dataSource" class="com.huawei.ide.portal.RcmDataSource"
		destroy-method="close">  
		<property name="driverClassName" value="${jdbc.driverClassName}"/>  
        <property name="url" value="${jdbc.url}"/>  
        <property name="username" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>  
        <!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->     
     	<property name="testOnBorrow" value="false" />
     	<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,
			则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true" />
        <!-- 连接池启动时的初始值 -->  
  		<property name="initialSize" value="10" />
        <!-- 连接池的最大值 -->  
  		<property name="maxActive" value="100" />
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
  		<property name="maxIdle" value="20" />
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
  		<property name="minIdle" value="10" />
		<!-- 连接被泄露时是否打印 -->  
        <property name="logAbandoned" value="true"/>
		<!-- 标记是否删除泄露的连接 -->    
        <property name="removeAbandoned"  value="true"/>  
        <!-- 泄露的连接可以被删除的超时值, 单位秒 -->    
        <property name="removeAbandonedTimeout" value="120"/>
		<!-- 超时等待时间以毫秒为单位 -->  
        <property name="maxWait" value="5000"/>
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位.
        	如果设置为非正数-1,则不运行空闲连接回收器线程 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>  
        <!-- 连接在池中保持空闲而不被空闲连接回收器线程,(如果有)回收的最小时间值，单位毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="60000"/>
		<!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="5"/>  
	</bean>  
		
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务管理的模板：Spring为了简化事物管理的代码而提供的类 -->
	<!-- 
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	-->
	
	<!-- 声明式的事务管理方式 AspectJ的XML方式  Start -->
	<!-- 配置事务通知(事务的增强) -->
	<!-- 
		propagation : 事务传播行为
		isolation : 事务隔离级别
		read-only : 只读
		rollback-for : 发生哪些异常回滚
		no-rollback-for : 发生哪些异常不回滚
		timeout : 过期信息
	 -->
	<tx:advice id="txAdvice_Person" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 提供事务处理的方法名称 -->
			<tx:method name="addPerson" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置切面 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut expression="execution(* com.huawei.ide.services.person.PersonService+.*(..))" id="pointcut_Person"/>
		<!-- 配置切面 -->
		<aop:advisor advice-ref="txAdvice_Person" pointcut-ref="pointcut_Person"/>
	</aop:config>
	<!-- 声明式的事务管理方式 AspectJ的XML方式  End -->
	
	<!-- 声明式的事务管理方式  基于注解的方式  Start -->
	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 声明式的事务管理方式  基于注解的方式  End -->
	
	<!-- 错误码及错误描述定义加载及查询服务 -->
    <bean id="exDefConfigService"
        class="com.huawei.ide.interceptors.res.rcm.ErrorDescConfigService"
        init-method="initErrorDefInfo" />

    <!-- 字段校验配置加载及查询服务 -->
    <bean id="fieldValidateCfgService"
        class="com.huawei.ide.interceptors.res.rcm.ParamCheckerConfigService"
        init-method="initFieldValidInfo" />
        
        <!-- 系统配置定义加载及查询服务 -->
    <bean id="rcmServiceSysConfigService"
        class="com.huawei.ide.interceptors.res.rcm.RcmServiceSysConfigService"
        init-method="initSysConfigDefInfo">
    </bean> 
	
</beans>