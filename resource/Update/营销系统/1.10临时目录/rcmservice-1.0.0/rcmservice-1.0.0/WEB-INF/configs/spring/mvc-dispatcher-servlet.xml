<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	   http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
  	<!-- 本配置文件是为名称为"SpringMVC"的DispatcherServlet使用，提供其Spring MVC配置 -->
  	
  	<!-- 需要把这段放在xxx-servlet.xml中<context:component-scan base-package="xxxxx"/>前面 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <!-- 用于避免响应头过大 -->
                    <property name="writeAcceptCharset" value="false" />
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/json;charset=UTF-8</value>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
  	
  	<!-- 
  		启动Spring基于annotation的DI，可以在Spring MVC中使用Spring的注解功能
  		激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 
  	-->
   	<context:annotation-config />
   	
   	<!-- DispatcherServlet上下文，只搜索@Controller标注的类 不搜索其他标注的类 -->
	<context:component-scan base-package="com.huawei.ide.controllers">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
			
	<!-- 
		HandlerMapping，无需配置，Spring MVC可以默认启动 
		DefaultAnnotationHandlerMapping annotaion-driven HandlerMapping
	-->
    
	<!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
	<mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                 <constructor-arg value="UTF-8"/>
                 <property name="supportedMediaTypes">
                    <list>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg index="0" value="text"/>
                            <constructor-arg index="1" value="plain"/>
                            <constructor-arg index="2" value="UTF-8"/>
                        </bean>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg index="0" value="*"/>
                            <constructor-arg index="1" value="*"/>
                            <constructor-arg index="2" value="UTF-8"/>
                        </bean>
                    </list>
                </property>
            </bean>
            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"
                  id="fastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <!--这个地方加上这个能自己配置功能，比如时间的格式化，null输出""等等-->
                <!--<property name="serializerFeature"></property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
	
	<mvc:default-servlet-handler />
    
	<!-- 静态资源处理，css，js，images -->
	<mvc:resources location="/static/" mapping="/static/**" />
	
	<!-- 注册拦截器,拦截所有请求 -->
	<!-- 
	<mvc:interceptors>
			<bean class="com.huawei.ide.interceptors.MvcInterceptor" />
	</mvc:interceptors>
	-->
	<!-- 拦截指定请求 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/res/home_index"/>
			<bean class="com.huawei.ide.interceptors.MvcInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager">  
            <bean class="org.springframework.web.accept.ContentNegotiationManager">  
                <constructor-arg>
                    <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">  
                        <constructor-arg>  
                            <map>  
                                <entry key="json" value="application/json"/>  
                                <entry key="xml" value="application/xml"/>
                                <entry key="htm" value="text/html"/>
                            </map>  
                        </constructor-arg>  
                    </bean>  
                </constructor-arg>  
            </bean>  
        </property>
		<property name="defaultViews">  
            <list>  
                <!-- JSON View -->  
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
            </list>  
        </property>  
	</bean>
	
	<!-- 配置ViewResolver，可以配置多个ViewResolver，使用order属性排序，InternalResourceViewResolver放在最后 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/jsps/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!--200*1024*1024即200M,resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="209715200" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>
		
</beans>